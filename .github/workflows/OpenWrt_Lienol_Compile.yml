#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
# # # #

name: OpenWrt-Lienol-Compile

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  # release:
  #   types: [published]

env:
  REPO_URL: https://github.com/Lienol/openwrt
  REPO_BRANCH: master
  UPLOAD_COWTRANSFER: true

jobs:

  build_openwrt:

    name: Build OpenWrt and release
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          
          df -h
          
      - name: Clone source code
        working-directory: /workdir
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
      - name: Custome packages
        working-directory: /workdir/openwrt
        run: |
          cd package
          mkdir openwrt-packages
          cd openwrt-packages
          
          # Add themes
          git clone --depth=1 https://github.com/openwrt-develop/luci-theme-atmaterial.git
          git clone --depth=1 https://github.com/rosywrt/luci-theme-rosy
          git clone --depth=1 https://github.com/xiaoqingfengATGH/luci-theme-infinityfreedom.git
          git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
          
          # Add ServerChan
          # git clone --depth=1 https://github.com/tty228/luci-app-serverchan
          # git clone --depth=1 https://github.com/Ameykyl/luci-app-koolproxyR
          
          # OpenClash
          # git clone --depth=1 -b master https://github.com/vernesong/OpenClash.git
          
          # AdguardHome
          # git clone --depth=1 https://github.com/rufengsuixing/luci-app-adguardhome.git
          
          # Add smartdns
          # svn co https://github.com/pymumu/smartdns/trunk/package/openwrt ../smartdns
          # svn co https://github.com/project-openwrt/openwrt/trunk/package/ntlf9t/luci-app-smartdns ../luci-app-smartdns
          
          # Open-app-filter
          # git clone --depth=1 https://github.com/destan19/OpenAppFilter.git
          
      - name: Update feeds
        working-directory: /workdir/openwrt
        run: |
          # sed -i 's/^#\(.*helloworld\)/\1/' feeds.conf.default
          # sed -i 's/\"#src-git\"/\"src-git\"/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Generate configuration file
        working-directory: /workdir/openwrt
        run: |
          rm -f ./.config*
          touch ./.config
          
          # 取消编译VMware镜像,UEFI固件:
          cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_PAD is not set
          # CONFIG_VMDK_IMAGES is not set
          # CONFIG_EFI_IMAGES is not set
          EOF
          
          # Compress firmware:
          # cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP=y
          # EOF
          
          # LuCI theme:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_PACKAGE_luci-theme-atmaterial=y
          CONFIG_PACKAGE_luci-theme-rosy=y
          CONFIG_PACKAGE_luci-theme-infinityfreedom=y
          # CONFIG_PACKAGE_luci-theme-netgear=y
          EOF
          
          # Other packages:
          cat >> .config <<EOF
          # OpenClash
          # CONFIG_PACKAGE_luci-app-openclash=y
          # AdGuardHome
          # CONFIG_PACKAGE_luci-app-adguardhome=y
          # smartDNS
          # CONFIG_PACKAGE_luci-app-smartdns=y
          # Add ServerChan
          # CONFIG_PACKAGE_luci-app-serverchan=y
          # disable xunlei
          # CONFIG_PACKAGE_luci-app-xlnetacc is not set
          # Open app filter
          # CONFIG_PACKAGE_luci-app-oaf=y
          # netdata
          # CONFIG_PACKAGE_luci-app-netdata=y
          EOF
          
          # Virtualization
          cat >> .config <<EOF
          # QEMU
          # CONFIG_PACKAGE_qemu-arm-softmmu=y
          # CONFIG_PACKAGE_qemu-bridge-helper=y
          # CONFIG_PACKAGE_qemu-firmware-efi=y
          # CONFIG_PACKAGE_qemu-firmware-pxe=y
          # CONFIG_PACKAGE_qemu-firmware-seabios=y
          # CONFIG_PACKAGE_qemu-firmware-seavgabios=y
          CONFIG_PACKAGE_qemu-ga=y
          # CONFIG_PACKAGE_qemu-img=y
          # CONFIG_PACKAGE_qemu-keymaps=y
          # CONFIG_PACKAGE_qemu-nbd=y
          # CONFIG_PACKAGE_qemu-x86_64-softmmu=y
          
          # CONFIG_PACKAGE_kmod-irqbypass=y
          CONFIG_PACKAGE_kmod-kvm-amd=y
          CONFIG_PACKAGE_kmod-kvm-intel=y
          CONFIG_PACKAGE_kmod-kvm-x86=y
          EOF
          
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
      - name: Make download
        working-directory: /workdir/openwrt
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
      - name: Compile firmware
        working-directory: /workdir/openwrt
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
      - name: Prepare artifact
        working-directory: /workdir/openwrt
        run: |
          find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}
          echo "::set-env name=FIRMWARE::$PWD"
      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: OpenWrt_firmware
          path: openwrt/bin/targets/
          
      - name: Upload firmware to cowtransfer
        if: env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
